(define (row matrix n)
  (if (= n 0)
      (car matrix)
      (row (cdr matrix) (- n 1))))
(define (column matrix n)
  (map  (lambda (row) (nth-element row n)) matrix))
(define (nth-element list1 n)
  (if (= n 0)
      (car list1)
      (nth-element (cdr list1) (- n 1))))
(define (delete-column matrix n)
  (map (lambda (row) (without row n)) matrix))
(define (without list index)
  (cond
    ((null? list) '())
    ((= index 0) (without (cdr list) (- index 1)))
    (else (cons (car list) (without (cdr list) (- index 1))))))
(define (multiply-list-elems list1)
  (if(null? list1)
     1
     (* (car list1) (multiply-list-elems (cdr list1)))))
(define (diagonal matrix)
  (define (diagonal-helper matrix current)
    (if (= current (length matrix))
        '()
        (cons (nth-element (row matrix current) current) (diagonal-helper matrix (+ current 1)))))
  (diagonal-helper matrix 0))
(define (positive matrix)
  (define (positive-helper matrix n)
    (if (= n 3)
        0
        (+ (multiply-list-elems (diagonal matrix)) (positive-helper (delete-column matrix 0) (+ 1 n)))))
  (positive-helper matrix 0))
(define (sec-diagonal matrix)
  (define (sec-diagonal-helper matrix current)
    (if (= current (length matrix))
        '()
        (cons (nth-element (row matrix current) (- (length (row matrix current)) (+ current 1))) (sec-diagonal-helper matrix (+ current 1)))))
  (sec-diagonal-helper matrix 0))
(define (number-of-columns matrix)
  (if (null? matrix)
      0
      (length (car matrix ))))
(define (negative matrix)
  (define (negative-helper matrix n)
    (if (= n 3)
        0
        (+ (multiply-list-elems (sec-diagonal matrix)) (negative-helper (delete-column matrix (- (number-of-columns matrix) 1)) (+ 1 n)))))
  (negative-helper matrix 0))
(define (determinant matrix)
  (+ (positive (duplicate matrix)) (- (negative (duplicate matrix)))))